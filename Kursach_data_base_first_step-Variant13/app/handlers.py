from aiogram import F, Router
from aiogram.types import Message
from aiogram import types

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import app.keyboards as kb

from app.database.requests import get_movie_by_id, get_genre_by_id, get_studio_by_id, get_admin_by_telegram_id
from app.database.requests_reg import save_user_to_db, is_user_registered_db, get_user_data_by_telegram_id, save_arenda_data, get_user_data, get_rented_movies_by_user, finish_rental_in_db, get_rented_movies_by_user

router_u = Router()
    
class AddNewUser(StatesGroup):
    passport = State()
    fio_klient = State()
    adress = State()
    phone_number = State()
    telegram_id = State()

@router_u.message(CommandStart())
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    admin = await get_admin_by_telegram_id(user_id)
    if admin is None:
        await message.answer(f'–ü—Ä–∏–≤–µ—Ç üëãüèº,\n–Ø - —á–∞—Ç-–±–æ—Ç –≤–∏–¥–µ–æ–ø—Ä–æ–∫–∞—Ç–∞\n\n'
                             f'–Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å: \n\n'
                             f'‚Ä¢ –í—Å–µ —Ñ–∏–ª—å–º—ã \n'
                             f'‚Ä¢ –§–∏–ª—å–º—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ä–µ–∂–∏—Å—Å–µ—Ä—É\n'
                             f'‚Ä¢ –§–∏–ª—å–º—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∂–∞–Ω—Ä—É\n'
                             f'‚Ä¢ –§–∏–ª—å–º—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∏–Ω–æ—Å—Ç—É–¥–∏–∏\n\n'
                             f'–ê —Ç–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è —Ñ–∏–ª—å–º –≤ –∞—Ä–µ–Ω–¥—É')
        await message.answer(f'üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=await kb.menu(user_id, is_user_registered_db))
    else:
        await message.answer("–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=await kb.menu(user_id, is_user_registered_db))

@router_u.message(F.text == '–ú–µ–Ω—é')
async def Menu(message: Message):
    user_id = message.from_user.id
    await message.answer('üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.menu(user_id, is_user_registered_db))

@router_u.message(F.text == 'üé• –§–∏–ª—å–º—ã')
async def Movie(message: Message):
    await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:', reply_markup=await kb.movies_all())

@router_u.message(F.text == 'üí£ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∂–∞–Ω—Ä—É')
async def Genre(message: Message):
    await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:', reply_markup=await kb.genre())

@router_u.message(F.text == 'üí° –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–∂–∏—Å—Å–µ—Ä—É')
async def Director(message: Message):
    await message.answer(f'–í—ã–±–µ—Ä–µ—Ç–µ —Ä–µ–∂–∏—Å—Å–µ—Ä–∞:', reply_markup=await kb.director())

@router_u.message(F.text == 'üìÄ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∏–Ω–æ—Å—Ç—É–¥–∏–∏')
async def Studio(message: Message):
    await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∏–Ω–æ—Å—Ç—É–¥–∏—é:', reply_markup=await kb.studio())

@router_u.message(F.text == 'üìå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
async def cmd_register(message: Message, state: FSMContext) -> None: 
    user_id = message.from_user.id
    if await is_user_registered_db(user_id):
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
    else:
        await message.answer("–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ: —Å–µ—Ä–∏—é –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞")
        await state.set_state(AddNewUser.passport)

@router_u.message(F.text == 'üìã –ú–æ—è –∞–Ω–∫–µ—Ç–∞')
async def view_profile(message: Message):
    user_id = message.from_user.id
    user_data = await get_user_data_by_telegram_id(user_id)
    if user_data:
        profile_text = (
            f"üìã –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n\n"
            f"–ü–∞—Å–ø–æ—Ä—Ç: <b>{user_data.passport}</b>\n"
            f"–§–ò–û: <b>{user_data.fio_klient}</b>\n"
            f"–ê–¥—Ä–µ—Å: <b>{user_data.address}</b>\n"
            f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <b>{user_data.phone_number}</b>\n"
        )
        rented_movies = await get_rented_movies_by_user(user_id)
        if rented_movies:
            profile_text += "\nüé• –§–∏–ª—å–º—ã –≤ –∞—Ä–µ–Ω–¥–µ:\n"
            for arenda, movie in rented_movies:
                profile_text += f"\n<b>{movie.name}</b>\n"
                profile_text += f"–ù–∞—á–∞–ª–æ –∞—Ä–µ–Ω–¥—ã: {arenda.time_to_start}\n"
                profile_text += f"–¶–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã: {arenda.cost}\n"
            finish_rental_markup = await kb.finish_rental_buttons(rented_movies)
            await message.answer(profile_text, reply_markup=finish_rental_markup)
        else:
            await message.answer(profile_text, reply_markup=await kb.menu(user_id, is_user_registered_db))
    else:
        await message.answer("–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        
@router_u.callback_query(F.data.startswith("genre_name:"))
async def movies_by_genre(query: types.CallbackQuery):
    genre_name = query.data.split(":")[1]
    movies_markup = await kb.movies_by_genre(genre_name)
    if movies_markup.inline_keyboard:
        await query.message.answer(f'{genre_name}:', reply_markup=movies_markup)
    else:
        await query.message.answer('–§–∏–ª—å–º–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∂–∞–Ω—Ä—É –Ω–µ—Ç.')

@router_u.callback_query(F.data.startswith("director_name:"))
async def movies_by_director(query: types.CallbackQuery):
    director_name = query.data.split(":")[1]
    await query.message.answer(f'{director_name}:', reply_markup=await kb.movies_director(director_name))

@router_u.callback_query(F.data.startswith("studio_id:"))
async def movies_by_studio(query: types.CallbackQuery):
    studio_id = int(query.data.split(":")[1])
    movies_markup = await kb.movies_by_studio(studio_id)
    if movies_markup.inline_keyboard:
        studio = await get_studio_by_id(studio_id)
        await query.message.answer(f'{studio.name}:', reply_markup=movies_markup)
    else:
        await query.message.answer('–§–∏–ª—å–º–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∏–Ω–æ—Å—Ç—É–¥–∏–∏ –Ω–µ—Ç.')

@router_u.callback_query(F.data.startswith("return_to_menu"))
async def return_to_menu(query: types.CallbackQuery):
    user_id = query.from_user.id
    await query.message.answer('üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=await kb.menu(user_id, is_user_registered_db))

@router_u.callback_query(F.data.startswith("movie_id:"))
async def movie_details(query: types.CallbackQuery):
    user_id = query.from_user.id 
    is_registered = await is_user_registered_db(user_id)
    movie_id_str = query.data.split(":")[1].split("_")[0]
    movie_id = int(movie_id_str)
    movie = await get_movie_by_id(movie_id)
    if movie:
        genre = await get_genre_by_id(movie.genre_id)
        studio = await get_studio_by_id(movie.studio_id)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [await kb.rent_movie_button(movie_id)] if is_registered else [],
            [await kb.return_to_menu()]
        ])
        await query.message.answer(
            f'<b>{movie.name}</b>\n\n'
            f'<i>–†–µ–∂–∏—Å—Å–µ—Ä:</i> {movie.fio_director}\n'
            f'<i>–ñ–∞–Ω—Ä:</i> {genre.name}\n'
            f'<i>–ö–∏–Ω–æ—Å—Ç—É–¥–∏–∏:</i> {studio.name}\n'
            f'<i>–ê–∫—Ç—ë—Ä—ã –≤ –≥–ª–∞–≤–Ω—ã—Ö —Ä–æ–ª—è—Ö:</i> {movie.performers_of_the_main_roles}\n'
            f'<i>–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:</i> {movie.year_of_release}\n\n'
            f'<i>–û–ø–∏—Å–∞–Ω–∏–µ:</i> {movie.annotation}\n\n'
            f'<i>–°—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã:</i> <b>{movie.cost}‚ÇΩ/—Å—É—Ç–∫–∏</b>\n', reply_markup=keyboard)
    else:
        await query.message.answer('–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')

@router_u.callback_query(F.data.startswith("rent_movie:"))
async def rent_movie(query: types.CallbackQuery):
    user_id = query.from_user.id
    movie_id = int(query.data.split(":")[1])
    is_registered = await is_user_registered_db(user_id)
    if not is_registered:
        await query.message.answer("–î–ª—è –∞—Ä–µ–Ω–¥—ã —Ñ–∏–ª—å–º–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    user_data = await get_user_data(user_id)
    await save_arenda_data(movie_id, user_data.passport)
    await query.message.answer("–§–∏–ª—å–º –≤–∑—è—Ç –≤ –∞—Ä–µ–Ω–¥—É! üéâ")
    await query.message.answer('üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=await kb.menu(user_id, is_user_registered_db))

@router_u.callback_query(F.data.startswith("finish_rental"))
async def finish_rental(query: types.CallbackQuery):
    _, arenda_id = query.data.split(":")
    user_id = query.from_user.id
    success = await finish_rental_in_db(arenda_id, user_id)
    if success:
        await query.answer("–ê—Ä–µ–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        await query.message.answer('üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=await kb.menu(user_id, is_user_registered_db))
    else:
        await query.answer("–û—à–∏–±–∫–∞: –∞—Ä–µ–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        await query.message.answer('üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=await kb.menu(user_id, is_user_registered_db))
        
@router_u.message(AddNewUser.passport)
async def process_passport(message: Message, state: FSMContext) -> None:
    await state.update_data(passport=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û.")
    await state.set_state(AddNewUser.fio_klient)

@router_u.message(AddNewUser.fio_klient)
async def process_fio(message: Message, state: FSMContext) -> None:
    await state.update_data(fio_klient=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å.")
    await state.set_state(AddNewUser.adress)

@router_u.message(AddNewUser.adress)
async def process_address(message: Message, state: FSMContext) -> None:
    await state.update_data(address=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ü–∏—Ñ—Ä–∞–º–∏")
    await state.set_state(AddNewUser.phone_number)

@router_u.message(AddNewUser.phone_number)
async def process_phone(message: Message, state: FSMContext) -> None:
    await state.update_data(phone_number=message.text)
    data = await state.get_data()
    message_text = (
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n"
        f"–ü–∞—Å–ø–æ—Ä—Ç: <b>{data['passport']}</b>\n"
        f"–§–ò–û: <b>{data['fio_klient']}</b>\n"
        f"–ê–¥—Ä–µ—Å: <b>{data['address']}</b>\n"
        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <b>{data['phone_number']}</b>\n\n"
        f"–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", callback_data="register")]])
    await message.answer(message_text, reply_markup=keyboard)

@router_u.callback_query(F.data.startswith("register"))
async def register_user(query: types.CallbackQuery, state: FSMContext):
    user_id = query.from_user.id
    data = await state.get_data()
    await save_user_to_db(query.from_user.id, data)
    await state.clear()
    await query.message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!")
    await query.message.answer("üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=await kb.menu(user_id, is_user_registered_db))