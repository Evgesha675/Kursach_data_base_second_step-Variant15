from aiogram import F, Router
from aiogram.types import Message
from aiogram import types
from aiogram.filters import CommandStart

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import app.keyboards as kb
from config import ADMIN_TELEGRAM_ID, EditKassaStates, EditKassirStates, EditClientStates, EditTicketStates, EditCouponStates

from app.database.requests import (
    get_kassa_info_by_id, save_kassa_to_db, get_airlines_for_add_kassa, get_airline_name_by_code, 
    delete_kassa_from_db, update_kassa_address, update_kassa_airline, get_all_airlines_for_edit_kassa, 
    get_airline_info_by_id, get_kassir_info_by_id, get_kassas_for_add_cashier, save_cashier_to_db, get_kassa_address_by_code, 
    delete_kassir_from_db, update_kassir_full_name, update_kassir_ticket_office, get_all_ticket_offices, get_client_info_by_passport, 
    save_client_to_db, delete_client_from_db, update_client_full_name, get_ticket_info_by_id, get_clients, 
    get_airlines, get_cashiers_by_ticket_office, get_ticket_offices, save_ticket_to_db, get_ticket_office_address,
    get_cashier_full_name, get_airline_name, get_client_full_name, delete_ticket_from_db, update_ticket_type, 
    update_ticket_sale_date, update_ticket_ticket_office, update_ticket_cashier, update_ticket_airline, 
    update_ticket_client, get_all_clients, get_all_cashiers, get_all_airlines, get_coupon_info_by_id, 
    save_selected_ticket_to_coupon, delete_coupon_from_db, update_coupon_ticket, get_all_tickets_for_edit_coupon,
    update_coupon_fare, update_coupon_flight_direction)

router_u = Router()

class AddKassaStates(StatesGroup):
    address = State()
    airline = State()

class AddCashierStates(StatesGroup):
    full_name = State()
    kassa = State()

class AddClientStates(StatesGroup):
    full_name = State()
    passport_series = State()
    passport_number = State()

class AddTicketStates(StatesGroup):
    ticket_type = State()
    sale_date = State()
    ticket_office = State()
    cashier = State()
    airline = State()
    client = State()

class AddCouponStates(StatesGroup):
    flight_direction =  State()
    fare = State()
    ticket_id = State()
    

@router_u.message(CommandStart())
async def cmd_start(message: types.Message):
    if message.from_user.id == ADMIN_TELEGRAM_ID:
        await message.answer(f'–ü—Ä–∏–≤–µ—Ç üëãüèº,\n–Ø - —á–∞—Ç-–±–æ—Ç –ê–í–ò–ê–ö–û–ú–ü–ê–ù–ò–ò\n\n'
                             f'–Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å: \n\n'
                             f'‚Ä¢ –ö–∞—Å—Å–∞–º–∏\n'  
                             f'‚Ä¢ –ö–∞—Å—Å–∏—Ä–∞–º–∏\n'
                             f'‚Ä¢ –ö–ª–∏–µ–Ω—Ç–∞–º–∏\n'
                             f'‚Ä¢ –ö—É–ø–æ–Ω–∞–º–∏\n'
                             f'‚Ä¢ –ë–∏–ª–µ—Ç–∞–º–∏\n\n'
                             f'–ê —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∞–≤–∏–∞–∫–æ–º–ø–Ω–∏—è–º')
        await message.answer(f'üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=await kb.menu())
    else:
        await message.answer(f'–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n'
                             f'–Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å\n'
                             f'‚Ä¢ –ö–∞—Å—Å–∞–º–∏\n'
                             f'‚Ä¢ –ö–∞—Å—Å–∏—Ä—ã\n'
                             f'‚Ä¢ –ö–ª–∏–µ–Ω—Ç–∞–º–∏\n'
                             f'‚Ä¢ –ö—É–ø–æ–Ω–∞–º–∏\n'
                             f'‚Ä¢ –ë–∏–ª–µ—Ç–∞–º–∏\n'
                             f'–û—Ç—á—ë—Ç—ã –∏ –≤–∑–∞–∏–º–æ–π–¥–µ—Å—Ç–≤–∏—è —Å –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è–º–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ /commands')
        await message.answer(f'üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=await kb.menu())
        
# –†–∞–±–æ—Ç–∞ —Å –∫–∞—Å—Å–∞–º–∏   
@router_u.message(F.text == 'üí≥ –ö–∞—Å—Å–∞')
async def Kassa(message: types.Message):
    await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Å—Å—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:', reply_markup=await kb.kassa())

@router_u.callback_query(F.data.startswith("kassa_number:"))
async def Kassa_inf(query: types.CallbackQuery):
    kassa_id = int(query.data.split(":")[1])
    kassa_info = await get_kassa_info_by_id(kassa_id)
    if kassa_info:
        text = (
            f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Å—Å–µ {kassa_info['address']}:</b>\n\n"
            f"<i>ID:</i> {kassa_id}\n"
            f"<i>–ê–¥—Ä–µ—Å:</i> {kassa_info['address']}\n"
            f"<i>–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è:</i> {kassa_info['airline_name']}")
        await query.message.answer(text, reply_markup=await kb.kassa_keyboard_act(kassa_id))
    else:
        await query.message.answer("–ö–∞—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=await kb.return_to_menu())

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Å—Å—ã
@router_u.callback_query(F.data.startswith("action.kassa.add_"))
async def Kassa_add(query: types.CallbackQuery, state: FSMContext):
    await query.message.answer("–î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—É—é –∫–∞—Å—Å—É. –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–∞—Å—Å—ã:")
    await state.set_state(AddKassaStates.address)

@router_u.message(AddKassaStates.address)
async def Process_kassa_adress(message: Message, state: FSMContext):
    await state.update_data(address=message.text)
    airlines = await get_airlines_for_add_kassa()
    keyboard = await kb.kassa_add(airlines)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—é:", reply_markup=keyboard)

@router_u.callback_query(F.data.startswith("airlines_code_kassa"))
async def Process_kassa_airlines(query: types.CallbackQuery, state: FSMContext):
    airline_code = query.data.split(":")[1]
    await state.update_data(airline_code=airline_code)

    data = await state.get_data()
    address = data.get('address', '')
    airline_code = data.get('airline_code', '')
    await save_kassa_to_db({'address': address, 'airline_code': airline_code})

    await query.message.answer("–ö–∞—Å—Å–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
    airline_code = int(airline_code)
    airline_name = await get_airline_name_by_code(airline_code)
    await show_kassa_summary(message=query.message, data={'address': address, 'airline_name': airline_name})
    await state.clear()

async def show_kassa_summary(message: Message, data: dict) -> None:
    address = data.get('address', '')
    airline_name = data.get('airline_name', '')
    text = (f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–∞—Å—Å–∞:\n\n"
           f"–ê–¥—Ä–µ—Å: <b>{address}</b>\n"
           f"–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è: <b>{airline_name}</b>\n")
    await message.answer(text)
           
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞—Å—Å—ã    
@router_u.callback_query(F.data.startswith("action.kassa.edit_"))
async def Kassa_edit(query: types.CallbackQuery, state: FSMContext):
    kassa_id_str = query.data.split("_")[1]
    kassa_id = int(kassa_id_str)
    await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π –ø—É–Ω–∫—Ç —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å", reply_markup=await kb.kassa_edit_keyboard(kassa_id, state))

@router_u.callback_query(F.data.startswith("action.kassa.address"))
async def Kassa_edit_address(query: types.CallbackQuery, state: FSMContext):
    kassa_id_str = query.data.split("_")[1]
    kassa_id = int(kassa_id_str)
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –∫–∞—Å—Å—ã:")
    await state.update_data(kassa_id=kassa_id)
    await state.set_state(EditKassaStates.address_edit)

@router_u.message(EditKassaStates.address_edit)
async def Process_kassa_edit_address(message: Message, state: FSMContext):
    new_address = message.text
    data = await state.get_data()
    kassa_id = data.get('kassa_id')
    await update_kassa_address(kassa_id, new_address)
    await message.answer("–ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
    await state.clear()

@router_u.callback_query(F.data.startswith("action.kassa.airline"))
async def Kassa_edit_airline(query: types.CallbackQuery, state: FSMContext):
    kassa_id_str = query.data.split("_")[1]
    kassa_id = int(kassa_id_str)
    airlines_list = await get_all_airlines_for_edit_kassa()
    keyboard = await kb.kassa_airlines_edit(airlines_list)
    await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –∫–∞—Å—Å—ã:", reply_markup=keyboard)
    await state.update_data(kassa_id=kassa_id)
    await state.set_state(EditKassaStates.airline_edit)

@router_u.callback_query(F.data.startswith("airlines.code.kassa.airlines"))
async def Process_kassa_edit_airline(query: types.CallbackQuery, state: FSMContext):
    airline_code = query.data.split(":")[1]
    data = await state.get_data()
    kassa_id = data.get('kassa_id')
    await update_kassa_airline(kassa_id, airline_code)
    await query.message.answer("–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!")
    await state.clear()
        
# –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Å—Å—ã
@router_u.callback_query(F.data.startswith("action.kassa.delete_"))
async def Kassa_delete(query: types.CallbackQuery):
    kassa_id_str = query.data.split("_")[1]
    kassa_id = int(kassa_id_str)
    success = await delete_kassa_from_db(kassa_id)
    if success:
        await query.message.answer("–ö–∞—Å—Å–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
    else:
        await query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∫–∞—Å—Å—É.")
    await query.message.answer("üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=await kb.menu())

# –†–∞–±–æ—Ç–∞ —Å –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è–º–∏
@router_u.message(F.text == '‚úàÔ∏è –ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏')
async def Airline(message: Message):
    await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤–∏–∫–æ–º–ø–∞–Ω–∏—é, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:', reply_markup=await kb.airlines())  

@router_u.callback_query(F.data.startswith("airlines:"))
async def Airlines_inf(query: types.CallbackQuery):
    airline_id = int(query.data.split(":")[1])
    airline_info = await get_airline_info_by_id(airline_id)
    if airline_info:
        text = (
            f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏ {airline_info['name']}:</b>\n\n"
            f"<i>ID:</i> {airline_info['id']}\n"
            f"<i>–ò–º—è:</i> {airline_info['name']}\n"
            f"<i>–ê–¥—Ä–µ—Å:</i> {airline_info['address']}")
        await query.message.answer(text, reply_markup=await kb.return_to_menu())
    else:
        await query.message.answer("–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=await kb.return_to_menu())

# –†–∞–±–æ—Ç–∞ —Å –∫–∞—Å—Å—Å–∏—Ä–∞–º–∏
@router_u.message(F.text == 'üë§ –ö–∞—Å—Å–∏—Ä—ã')
async def Kassir(message: Message):
    await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Å—Å–∏—Ä–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:', reply_markup=await kb.cashiers_all())

@router_u.callback_query(F.data.startswith("kassir_number:"))
async def Kassir_inf(query: types.CallbackQuery):
    kassir_id = int(query.data.split(":")[1])
    kassir_info = await get_kassir_info_by_id(kassir_id)
    if kassir_info:
        text = (
            f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Å—Å–∏—Ä–µ {kassir_info['full_name']}:</b>\n\n"
            f"<i>ID:</i> {kassir_id}\n"
            f"<i>–ò–º—è:</i> {kassir_info['full_name']}\n"
            f"<i>–ö–∞—Å—Å–∞:</i> {kassir_info['kassa_address']}")
        await query.message.answer(text, reply_markup=await kb.kassir_keyboard_act(kassir_id))
    else:
        await query.message.answer("–ö–∞—Å—Å–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=await kb.return_to_menu())

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞—Å—Å–∏—Ä–∞
@router_u.callback_query(F.data.startswith("action.kassir.add_"))
async def Cashier_add(query: types.CallbackQuery, state: FSMContext):
    await query.message.answer("–î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –Ω–æ–≤–æ–≥–æ –∫–∞—Å—Å–∏—Ä–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –∫–∞—Å—Å–∏—Ä–∞:")
    await state.set_state(AddCashierStates.full_name)

@router_u.message(AddCashierStates.full_name)
async def Process_cashier_full_name(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    kassas = await get_kassas_for_add_cashier()
    keyboard = await kb.kassir_add(kassas)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Å—Å—É:", reply_markup=keyboard)

@router_u.callback_query(F.data.startswith("kassa_code_cashier"))
async def Process_cashier_kassa(query: types.CallbackQuery, state: FSMContext):
    kassa_code = query.data.split(":")[1]
    await state.update_data(kassa_code=kassa_code)

    data = await state.get_data()
    full_name = data.get('full_name', '')
    kassa_code = data.get('kassa_code', '')
    await save_cashier_to_db({'full_name': full_name, 'kassa_code': kassa_code})

    await query.message.answer("–ö–∞—Å—Å–∏—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
    kassa_code = int(kassa_code)
    kassa_address = await get_kassa_address_by_code(kassa_code)
    await show_cashier_summary(message=query.message, data={'full_name': full_name, 'kassa_address': kassa_address})
    await state.clear()

async def show_cashier_summary(message: Message, data: dict) -> None:
    full_name = data.get('full_name', '')
    kassa_address = data.get('kassa_address', '')
    text = (f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∫–∞—Å—Å–∏—Ä:\n\n"
           f"–ò–º—è: <b>{full_name}</b>\n"
           f"–ö–∞—Å—Å–∞: <b>{kassa_address}</b>\n")
    await message.answer(text)

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —É–∂–µ –∏–º–µ—é—â–µ–≥–æ—Å—è –∫–∞—Å—Å–∏—Ä–∞
@router_u.callback_query(F.data.startswith("action.kassir.edit_"))
async def Kassir_edit(query: types.CallbackQuery, state: FSMContext):
    kassir_id_str = query.data.split("_")[1]
    kassir_id = int(kassir_id_str)
    await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∫–∞—Å—Å–∏—Ä–∞ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å", reply_markup=await kb.kassir_edit_keyboard(kassir_id))
    
@router_u.callback_query(F.data.startswith("action.kassir.fullname_"))
async def Kassir_edit_full_name(query: types.CallbackQuery, state: FSMContext):
    kassir_id_str = query.data.split("_")[1]
    kassir_id = int(kassir_id_str)
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û –∫–∞—Å—Å–∏—Ä–∞:")
    await state.update_data(kassir_id=kassir_id)
    await state.set_state(EditKassirStates.full_name_edit)

@router_u.message(EditKassirStates.full_name_edit)
async def Process_kassir_edit_full_name(message: Message, state: FSMContext):
    new_full_name = message.text
    data = await state.get_data()
    kassir_id = data.get('kassir_id')
    success = await update_kassir_full_name(kassir_id, new_full_name)
    if success:
        await message.answer("–§–ò–û –∫–∞—Å—Å–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –§–ò–û –∫–∞—Å—Å–∏—Ä–∞.")
    await state.clear()

@router_u.callback_query(F.data.startswith("action.kassir.ticketoffice_"))
async def Kassir_edit_ticket_office(query: types.CallbackQuery, state: FSMContext):
    kassir_id_str = query.data.split("_")[1]
    kassir_id = int(kassir_id_str)
    ticket_offices = await get_all_ticket_offices()  
    keyboard = await kb.kassir_ticket_office_edit(ticket_offices)
    await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã –¥–ª—è –∫–∞—Å—Å–∏—Ä–∞:", reply_markup=keyboard)
    await state.update_data(kassir_id=kassir_id)
    await state.set_state(EditKassirStates.ticket_office_edit)

@router_u.callback_query(F.data.startswith("ticket_office_code_kassir"))
async def Process_kassir_edit_ticket_office(query: types.CallbackQuery, state: FSMContext):
    ticket_office_id = int(query.data.split(":")[1])
    data = await state.get_data()
    kassir_id = data.get('kassir_id')
    success = await update_kassir_ticket_office(kassir_id, ticket_office_id)
    if success:
        await query.message.answer("–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã –∫–∞—Å—Å–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")
    else:
        await query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã –∫–∞—Å—Å–∏—Ä–∞.")
    await state.clear()

# –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Å—Å–∏—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
@router_u.callback_query(F.data.startswith("action.kassir.delete_"))
async def Kassir_delete(query: types.CallbackQuery):
    kassir_id_str = query.data.split("_")[1]
    kassir_id = int(kassir_id_str)
    success = await delete_kassir_from_db(kassir_id)
    if success:
        await query.message.answer("–ö–∞—Å—Å–∏—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
    else:
        await query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∫–∞—Å—Å–∏—Ä–∞.")
    await query.message.answer("üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=await kb.menu())

# –†–∞–±–æ—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
@router_u.message(F.text == 'üë• –ö–ª–∏–µ–Ω—Ç—ã')
async def Coupon(message: Message):
    await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:', reply_markup=await kb.clients_all())  
    
@router_u.callback_query(F.data.startswith("action.client.info:"))
async def client_info_callback(query: types.CallbackQuery):
    passport_number = query.data.split(":")[1]
    client_info = await get_client_info_by_passport(passport_number)
    
    if client_info:
        text = (
            f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ {client_info['full_name']}:</b>\n\n"
            f"<i>–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞:</i> {client_info['passport_number']}\n"
            f"<i>–°–µ—Ä–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞:</i> {client_info['passport_series']}")
        await query.message.answer(text, reply_markup=await kb.client_actions(passport_number))
    else:
        await query.message.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=await kb.return_to_menu())   
        
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
@router_u.callback_query(F.data.startswith("action.client.add_"))
async def Client_add(query: types.CallbackQuery, state: FSMContext):
    await query.message.answer("–î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:")
    await state.set_state(AddClientStates.full_name)

@router_u.message(AddClientStates.full_name)
async def Process_client_full_name(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏—é –ø–∞—Å–ø–æ—Ä—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞:")
    await state.set_state(AddClientStates.passport_series)

@router_u.message(AddClientStates.passport_series)
async def Process_client_passport_series(message: Message, state: FSMContext):
    await state.update_data(passport_series=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞:")
    await state.set_state(AddClientStates.passport_number)

@router_u.message(AddClientStates.passport_number)
async def Process_client_passport_number(message: Message, state: FSMContext):
    await state.update_data(passport_number=message.text)

    data = await state.get_data()
    full_name = data.get('full_name', '')
    passport_series = data.get('passport_series', '')
    passport_number = data.get('passport_number', '')

    client_data = {
        'full_name': full_name,
        'passport_series': passport_series,
        'passport_number': passport_number
    }

    success = await save_client_to_db(client_data)

    if success:
        await message.answer("–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
        await show_client_summary(message=message, data=client_data)
        await state.clear()
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def show_client_summary(message: Message, data: dict) -> None:
    full_name = data.get('full_name', '')
    passport_series = data.get('passport_series', '')
    passport_number = data.get('passport_number', '')
    text = (f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç:\n\n"
           f"–ò–º—è: <b>{full_name}</b>\n"
           f"–°–µ—Ä–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞: <b>{passport_series}</b>\n"
           f"–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞: <b>{passport_number}</b>\n")
    await message.answer(text)        

# –ò–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
@router_u.callback_query(F.data.startswith("action.client.edit_"))
async def Client_edit(query: types.CallbackQuery, state: FSMContext):
    passport_number = query.data.split("_")[1]
    await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∫–ª–∏–µ–Ω—Ç–∞ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å", reply_markup=await kb.client_edit_keyboard(passport_number, state))

@router_u.callback_query(F.data.startswith("action.client.fullname_"))
async def Client_edit_full_name(query: types.CallbackQuery, state: FSMContext):
    passport_number = query.data.split("_")[1]
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:")
    await state.update_data(client_id=passport_number)
    await state.set_state(EditClientStates.full_name_edit)

@router_u.message(EditClientStates.full_name_edit)
async def Process_client_edit_full_name(message: Message, state: FSMContext):
    new_full_name = message.text
    data = await state.get_data()
    client_id = data.get('client_id')
    success = await update_client_full_name(client_id, new_full_name)
    if success:
        await message.answer("–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞.")
    await state.clear()
    
# –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
@router_u.callback_query(F.data.startswith("action.client.delete_"))
async def Client_delete(query: types.CallbackQuery):
    passport_number = query.data.split("_")[1]
    success = await delete_client_from_db(passport_number)
    if success:
        await query.message.answer("–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
    else:
        await query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞.")
    await query.message.answer("üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=await kb.menu())    

# –†–∞–±–æ—Ç–∞ —Å –±–∏–ª–µ—Ç–∞–º–∏
@router_u.message(F.text == 'üé´ –ë–∏–ª–µ—Ç—ã')
async def ticket_menu(message: Message):
    await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –±–∏–ª–µ—Ç, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:', reply_markup=await kb.tickets_all()) 

@router_u.callback_query(F.data.startswith("action.ticket.info:"))
async def ticket_info_callback(query: types.CallbackQuery):
    ticket_id = query.data.split(":")[1]
    ticket_info = await get_ticket_info_by_id(ticket_id)
    
    if ticket_info:
        text = (
            f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–ª–µ—Ç–µ:</b>\n\n"
            f"<i>–¢–∏–ø –±–∏–ª–µ—Ç–∞:</i> {ticket_info['ticket_type']}\n"
            f"<i>–î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏:</i> {ticket_info['sale_date']}\n"
            f"<i>–ö–∞—Å—Å–∞:</i> {ticket_info['ticket_office_address']}\n"
            f"<i>–ö–∞—Å—Å–∏—Ä:</i> {ticket_info['cashier_full_name']}\n"
            f"<i>–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è:</i> {ticket_info['airline_name']}\n"
            f"<i>–ö–ª–∏–µ–Ω—Ç:</i> {ticket_info['client_full_name']}\n"
        )
        await query.message.answer(text, reply_markup=await kb.ticket_actions(ticket_id))
    else:
        await query.message.answer("–ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=await kb.return_to_menu())   

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–∏–ª–µ—Ç–∞
@router_u.callback_query(F.data.startswith("action.ticket.add_"))
async def ticket_add(query: types.CallbackQuery, state: FSMContext):
    await query.message.answer("–î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π –±–∏–ª–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–∏–ª–µ—Ç–∞:", reply_markup=await kb.ticket_type_keyboard())
    await state.set_state(AddTicketStates.ticket_type)

@router_u.callback_query(F.data.startswith("ticket_type:"))
async def process_ticket_type(query: types.CallbackQuery, state: FSMContext):
    ticket_type = query.data.split(":")[1]
    await state.update_data(ticket_type=ticket_type)
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–¥–∞–∂–∏ –±–∏–ª–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
    await state.set_state(AddTicketStates.sale_date)

@router_u.message(AddTicketStates.sale_date)
async def process_sale_date(message: Message, state: FSMContext):
    await state.update_data(sale_date=message.text)
    
    ticket_offices = await get_ticket_offices()
    keyboard_ticket_offices = await kb.ticket_office_keyboard(ticket_offices)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Å—Å—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –±—ã–ª –ø—Ä–æ–¥–∞–Ω –±–∏–ª–µ—Ç:", reply_markup=keyboard_ticket_offices)
    await state.set_state(AddTicketStates.ticket_office)

@router_u.callback_query(F.data.startswith("action.ticket.office:"))
async def process_ticket_office(query: types.CallbackQuery, state: FSMContext):
    ticket_office_id = query.data.split(":")[1]
    await state.update_data(ticket_office_id=ticket_office_id)
    
    cashiers = await get_cashiers_by_ticket_office(ticket_office_id)
    keyboard_cashiers = await kb.cashier_keyboard(cashiers)

    await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Å—Å–∏—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–¥–∞–ª –±–∏–ª–µ—Ç:", reply_markup=keyboard_cashiers)
    await state.set_state(AddTicketStates.cashier)

@router_u.callback_query(F.data.startswith("action.ticket.cashier:"))
async def process_ticket_cashier(query: types.CallbackQuery, state: FSMContext):
    cashier_id = query.data.split(":")[1]
    await state.update_data(cashier_id=cashier_id)
    
    airlines = await get_airlines()
    keyboard_airlines = await kb.airline_keyboard(airlines)

    await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—é, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã–ø–∏—Å–∞–Ω –±–∏–ª–µ—Ç:", reply_markup=keyboard_airlines)
    await state.set_state(AddTicketStates.airline)

@router_u.callback_query(F.data.startswith("action.ticket.airline:"))
async def process_ticket_airline(query: types.CallbackQuery, state: FSMContext):
    airline_id = query.data.split(":")[1]
    await state.update_data(airline_id=airline_id)

    clients = await get_clients()
    keyboard_clients = await kb.client_keyboard(clients)

    await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã–ø–∏—Å–∞–Ω –±–∏–ª–µ—Ç:", reply_markup=keyboard_clients)
    await state.set_state(AddTicketStates.client)

@router_u.callback_query(F.data.startswith("action.ticket.client:"))
async def process_ticket_client(query: types.CallbackQuery, state: FSMContext):
    client_passport_number = query.data.split(":")[1]
    await state.update_data(client_passport_number=client_passport_number)

    data = await state.get_data()
    ticket_type = data.get('ticket_type', '')
    sale_date = data.get('sale_date', '')
    ticket_office_id = data.get('ticket_office_id', '')
    cashier_id = data.get('cashier_id', '')
    airline_id = data.get('airline_id', '')
    client_passport_number = data.get('client_passport_number', '')

    await save_ticket_to_db({
        'ticket_type': ticket_type,
        'sale_date': sale_date,
        'ticket_office_id': ticket_office_id,
        'cashier_id': cashier_id,
        'airline_id': airline_id,
        'client_passport_number': client_passport_number
    })

    await query.message.answer("–ë–∏–ª–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
    await show_ticket_summary(query.message, data)
    await state.clear()
 
async def show_ticket_summary(message: Message, data: dict) -> None:
    ticket_type = data.get('ticket_type', '')
    sale_date = data.get('sale_date', '')
    ticket_office_id = data.get('ticket_office_id', '')
    cashier_id = data.get('cashier_id', '')
    airline_id = data.get('airline_id', '')
    client_passport_number = data.get('client_passport_number', '')

    ticket_office_address = await get_ticket_office_address(ticket_office_id)
    cashier_full_name = await get_cashier_full_name(cashier_id)
    airline_name = await get_airline_name(airline_id)
    client_full_name = await get_client_full_name(client_passport_number)

    text = (
        f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –±–∏–ª–µ—Ç:\n\n"
        f"–¢–∏–ø –±–∏–ª–µ—Ç–∞: <b>{ticket_type}</b>\n"
        f"–î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏: <b>{sale_date}</b>\n"
        f"–ö–∞—Å—Å–∞: <b>{ticket_office_address}</b>\n"
        f"–ö–∞—Å—Å–∏—Ä: <b>{cashier_full_name}</b>\n"
        f"–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è: <b>{airline_name}</b>\n"
        f"–ö–ª–∏–µ–Ω—Ç: <b>{client_full_name}</b>\n"
    )
    await message.answer(text)

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —É–∂–µ –∏–º–µ—é—â–µ–≥–æ—Å—è –±–∏–ª–µ—Ç–∞
@router_u.callback_query(F.data.startswith("action.ticket.edit_"))
async def ticket_edit(query: types.CallbackQuery, state: FSMContext):
    ticket_id_str = query.data.split("_")[1]
    ticket_id = int(ticket_id_str)
    await state.set_state(EditTicketStates.ticket_id)
    await state.update_data(ticket_id=ticket_id)
    await state.set_state(EditTicketStates.ticket_id)
    await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –±–∏–ª–µ—Ç–∞ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å", reply_markup=await kb.ticket_edit_keyboard(state))


@router_u.callback_query(F.data.startswith("action.ticket.type_"))
async def ticket_edit_type(query: types.CallbackQuery, state: FSMContext):
    await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø –±–∏–ª–µ—Ç–∞:", reply_markup=await kb.ticket_edit_type())
    await state.set_state(EditTicketStates.ticket_type)

@router_u.callback_query(F.data.startswith("ticket_type_ticket"))
async def process_ticket_edit_type(query: types.CallbackQuery, state: FSMContext):
    new_ticket_type = query.data.split(":")[-1]
    data = await state.get_data()
    ticket_id = data.get('ticket_id')
    if not ticket_id:
        await query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–∏–ª–µ—Ç–∞.")
        await state.clear()
        return
    try:
        success = await update_ticket_type(ticket_id, new_ticket_type)
        if success:
            await query.message.answer("–¢–∏–ø –±–∏–ª–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
        else:
            await query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø –±–∏–ª–µ—Ç–∞.")
    except Exception as e:
        await query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞ –±–∏–ª–µ—Ç–∞: {e}")
    await state.clear()

@router_u.callback_query(F.data.startswith("action.ticket.sale_date_"))
async def ticket_edit_sale_date_callback(query: types.CallbackQuery, state: FSMContext):
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –ø—Ä–æ–¥–∞–∂–∏ –±–∏–ª–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
    await state.set_state(EditTicketStates.sale_date)

@router_u.message(EditTicketStates.sale_date)
async def process_ticket_edit_sale_date(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        ticket_id_str = data.get('ticket_id')
        print("Debug: ticket_id_str =", ticket_id_str)  
        ticket_id = int(ticket_id_str)

        new_sale_date = message.text
        success = await update_ticket_sale_date(ticket_id, new_sale_date)
        if success:
            await message.answer("–î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏ –±–∏–ª–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!")
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –ø—Ä–æ–¥–∞–∂–∏ –±–∏–ª–µ—Ç–∞.")
    except ValueError:
        print("Debug: ValueError:") 
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –±–∏–ª–µ—Ç–∞.")
    finally:
        await state.clear()

@router_u.callback_query(F.data.startswith("action.ticket.ticket_office_"))
async def ticket_edit_ticket_office(query: types.CallbackQuery, state: FSMContext):
    ticket_offices = await get_all_ticket_offices()
    keyboard = await kb.ticket_edit_ticket_office(ticket_offices)
    await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Å—Å—É –¥–ª—è –±–∏–ª–µ—Ç–∞:", reply_markup=keyboard)
    await state.set_state(EditTicketStates.ticket_office)

@router_u.callback_query(F.data.startswith("ticket_office_code_ticket"))
async def process_ticket_edit_ticket_office(query: types.CallbackQuery, state: FSMContext):
    ticket_office_id = int(query.data.split(":")[1])
    data = await state.get_data()
    ticket_id_str = data.get('ticket_id')
    ticket_id = int(ticket_id_str)
    success = await update_ticket_ticket_office(ticket_id, ticket_office_id)
    if success:
        await query.message.answer("–ö–∞—Å—Å–∞ –¥–ª—è –±–∏–ª–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!")
    else:
        await query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Å—Å—É –¥–ª—è –±–∏–ª–µ—Ç–∞.")
    await state.clear()

@router_u.callback_query(F.data.startswith("action.ticket.cashier_"))
async def ticket_edit_cashier(query: types.CallbackQuery, state: FSMContext):
    cashiers = await get_all_cashiers()
    keyboard = await kb.ticket_edit_cashier(cashiers)
    await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –∫–∞—Å—Å–∏—Ä–∞ –¥–ª—è –±–∏–ª–µ—Ç–∞:", reply_markup=keyboard)
    await state.set_state(EditTicketStates.cashier)

@router_u.callback_query(F.data.startswith("cashier_code_ticket"))
async def process_ticket_edit_cashier(query: types.CallbackQuery, state: FSMContext):
    cashier_id = int(query.data.split(":")[1])
    data = await state.get_data()
    ticket_id_str = data.get('ticket_id')
    ticket_id = int(ticket_id_str)
    success = await update_ticket_cashier(ticket_id, cashier_id)
    if success:
        await query.message.answer("–ö–∞—Å—Å–∏—Ä –¥–ª—è –±–∏–ª–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
    else:
        await query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Å—Å–∏—Ä–∞ –¥–ª—è –±–∏–ª–µ—Ç–∞.")
    await state.clear()

@router_u.callback_query(F.data.startswith("action.ticket.airline_"))
async def ticket_edit_airline(query: types.CallbackQuery, state: FSMContext):
    airlines = await get_all_airlines()
    keyboard = await kb.ticket_edit_airline(airlines)
    await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –±–∏–ª–µ—Ç–∞:", reply_markup=keyboard)
    await state.set_state(EditTicketStates.airline)

@router_u.callback_query(F.data.startswith("airline_code_ticket"))
async def process_ticket_edit_airline(query: types.CallbackQuery, state: FSMContext):
    airline_id = int(query.data.split(":")[1])
    data = await state.get_data()
    ticket_id = data.get('ticket_id')
    success = await update_ticket_airline(ticket_id, airline_id)
    if success:
        await query.message.answer("–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è –¥–ª—è –±–∏–ª–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!")
    else:
        await query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –±–∏–ª–µ—Ç–∞.")
    await state.clear()

@router_u.callback_query(F.data.startswith("action.ticket.client_"))
async def ticket_edit_client(query: types.CallbackQuery, state: FSMContext):
    ticket_id_str = query.data.split("_")[1]
    ticket_id = int(ticket_id_str)
    clients = await get_all_clients()
    keyboard = await kb.ticket_edit_client(clients)
    await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –±–∏–ª–µ—Ç–∞:", reply_markup=keyboard)
    await state.update_data(ticket_id=ticket_id)
    await state.set_state(EditTicketStates.client)

@router_u.callback_query(F.data.startswith("client_passport_number_ticket"))
async def process_ticket_edit_client(query: types.CallbackQuery, state: FSMContext):
    client_passport_number = int(query.data.split(":")[1])
    data = await state.get_data()
    ticket_id = data.get('ticket_id')
    success = await update_ticket_client(ticket_id, client_passport_number)
    if success:
        await query.message.answer("–ö–ª–∏–µ–Ω—Ç –¥–ª—è –±–∏–ª–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
    else:
        await query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –±–∏–ª–µ—Ç–∞.")
    await state.clear()

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –±–∏–ª–µ—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö  
@router_u.callback_query(F.data.startswith("action.ticket.delete_"))
async def ticket_delete(query: types.CallbackQuery):
    ticket_id = query.data.split("_")[1]
    success = await delete_ticket_from_db(ticket_id)
    if success:
        await query.message.answer("–ë–∏–ª–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
    else:
        await query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –±–∏–ª–µ—Ç.")
    await query.message.answer("üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=await kb.menu())
    
# –†–∞–±–æ—Ç–∞ —Å –∫—É–ø–æ–Ω–∞–º–∏  
@router_u.message(F.text == 'üéÅ –ö—É–ø–æ–Ω—ã')
async def coupons(message: Message):
    await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ø–æ–Ω, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:', reply_markup=await kb.coupons_all()) 

@router_u.callback_query(F.data.startswith("action.coupon.info:"))
async def coupon_info_callback(query: types.CallbackQuery):
    coupon_id = int(query.data.split(":")[1])
    coupon_info = await get_coupon_info_by_id(coupon_id)
    
    if coupon_info:
        text = (
            f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É–ø–æ–Ω–µ {coupon_info.id}:</b>\n\n"
            f"<i>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ—Ç–∞:</i> {coupon_info.flight_direction}\n"
            f"<i>–¢–∞—Ä–∏—Ñ:</i> {coupon_info.fare}")
        await query.message.answer(text, reply_markup=await kb.coupon_actions(coupon_info.id))
    else:
        await query.message.answer("–ö—É–ø–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=await kb.return_to_menu())
        
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É–ø–æ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
@router_u.callback_query(F.data.startswith("action.coupon.add_"))
async def coupon_add(query: types.CallbackQuery, state: FSMContext):
    await query.message.answer("–î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π –∫—É–ø–æ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –±–∏–ª–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=await kb.get_tickets_keyboard())
    await state.set_state(AddCouponStates.ticket_selection)

@router_u.callback_query(F.data.startswith("action.coupon.select_ticket:"))
async def process_coupon_select_ticket(query: types.CallbackQuery, state: FSMContext):
    ticket_id = int(query.data.split(":")[1])
    await state.update_data(ticket_id=ticket_id)
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ—Ç–∞:")
    await state.set_state(AddCouponStates.flight_direction)

@router_u.message(AddCouponStates.flight_direction)
async def process_coupon_flight_direction(message: Message, state: FSMContext):
    await state.update_data(flight_direction=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∫—É–ø–æ–Ω–∞:")
    await state.set_state(AddCouponStates.fare)

@router_u.message(AddCouponStates.fare)
async def process_coupon_fare(message: Message, state: FSMContext):
    try:
        fare = int(message.text)
        await state.update_data(fare=fare)
        data = await state.get_data()
        await save_selected_ticket_to_coupon(data)
        await show_coupon_summary(message, data)
        await state.clear()

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")

async def show_coupon_summary(message: Message, data: dict) -> None:
    flight_direction = data.get('flight_direction', '')
    fare = data.get('fare', '')
    text = (
        f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∫—É–ø–æ–Ω:\n\n"
        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ—Ç–∞: <b>{flight_direction}</b>\n"
        f"–¢–∞—Ä–∏—Ñ: <b>{fare}</b>\n"
    )
    await message.answer(text, reply_markup=await kb.return_to_menu() )

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —É–∂–µ –∏–º–µ—é—â–µ–≥–æ—Å—è –∫—É–ø–æ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

@router_u.callback_query(F.data.startswith("action.coupon.edit_"))
async def coupon_edit(query: types.CallbackQuery, state: FSMContext):
    coupon_id_str = query.data.split("_")[1]
    coupon_id = int(coupon_id_str)
    await state.update_data(coupon_id=coupon_id)
    await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å", reply_markup=await kb.coupon_edit_keyboard(coupon_id, state))

@router_u.callback_query(F.data.startswith("action.coupon.flight_direction"))
async def coupon_edit_flight_direction(query: types.CallbackQuery, state: FSMContext):
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ—Ç–∞ –¥–ª—è –∫—É–ø–æ–Ω–∞:")
    await state.set_state(EditCouponStates.flight_direction_edit)

@router_u.message(EditCouponStates.flight_direction_edit)
async def process_coupon_edit_flight_direction(message: Message, state: FSMContext):
    new_flight_direction = message.text
    data = await state.get_data()
    coupon_id = data.get('coupon_id')
    await update_coupon_flight_direction(coupon_id, new_flight_direction)
    await message.answer("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")
    await state.clear()

@router_u.callback_query(F.data.startswith("action.coupon.fare"))
async def coupon_edit_fare(query: types.CallbackQuery, state: FSMContext):
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ –¥–ª—è –∫—É–ø–æ–Ω–∞:")
    await state.set_state(EditCouponStates.fare_edit) 
    
@router_u.message(EditCouponStates.fare_edit)
async def process_coupon_edit_fare(message: Message, state: FSMContext):
    try:
        new_fare = int(message.text)
        if new_fare is None:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
            await state.clear()
        data = await state.get_data()
        coupon_id = data.get('coupon_id')
        await update_coupon_fare(coupon_id, new_fare)
        await message.answer("–¢–∞—Ä–∏—Ñ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
        
@router_u.callback_query(F.data.startswith("action.coupon.ticket"))
async def coupon_edit_ticket(query: types.CallbackQuery, state: FSMContext):
    tickets_list = await get_all_tickets_for_edit_coupon()
    keyboard = await kb.coupon_tickets_edit(tickets_list)
    await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –±–∏–ª–µ—Ç –¥–ª—è –∫—É–ø–æ–Ω–∞:", reply_markup=keyboard)

@router_u.callback_query(F.data.startswith("action.coupon.selectticket:"))
async def process_coupon_select_ticket(query: types.CallbackQuery, state: FSMContext):
    ticket_id = int(query.data.split(":")[1])
    data = await state.get_data()
    coupon_id = data.get('coupon_id')
    await update_coupon_ticket(coupon_id, ticket_id)
    await query.message.answer("–ë–∏–ª–µ—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
    await state.clear()

# –£–¥–∞–ª–µ–Ω–∏—è –∫—É–ø–æ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
@router_u.callback_query(F.data.startswith("action.coupon.delete_"))
async def coupon_delete(query: types.CallbackQuery):
    coupon_id_str = query.data.split("_")[1]
    coupon_id = int(coupon_id_str)
    success = await delete_coupon_from_db(coupon_id)
    if success:
        await query.message.answer("–ö—É–ø–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
    else:
        await query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∫—É–ø–æ–Ω.")
    await query.message.answer("üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=await kb.menu())


@router_u.callback_query(F.data.startswith("return_to_menu"))
async def return_to_menu(query: types.CallbackQuery):
    await query.message.answer('üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=await kb.menu())
