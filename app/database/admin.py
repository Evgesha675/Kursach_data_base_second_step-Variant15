import pandas as pd
import io
from openpyxl.utils.dataframe import dataframe_to_rows
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram import types
from aiogram.fsm.state import State, StatesGroup

import app.keyboards as kb
from config import ADMIN_TELEGRAM_ID, EditAirlineStates

from app.database.requests import get_airline_info_by_id
from app.database.requests_a import save_airline_to_db, delete_airline_from_db, update_airline_name, update_airline_address, get_tickets_info_by_month_and_airline, get_tickets_info_by_date_and_airline, get_tickets_info_by_airline


router_a = Router()

class AddAirlineStates(StatesGroup):
    name = State()
    address = State()
    airline_id = State()

class OtchetAirlineStates(StatesGroup):
    airlines_id = State()

class DataAirlineStates(StatesGroup):
    airlines_id = State()
    time_start = State()
    time_finish = State()
    

@router_a.message(Command("commands"))
async def start_add_movie(message: Message, state: FSMContext) -> None:
    if message.from_user.id == ADMIN_TELEGRAM_ID:
        await message.answer(f"–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n\n"
                             f"/airlines - –í–æ–∑–º–æ–∂–æ–Ω–æ—Å—Ç—å –î–æ–±–∞–≤–∏—Ç—å/–ò–∑–º–µ–Ω–∏—Ç—å/–£–¥–∞–ª–∏—Ç—å –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—é\n\n"
                             f"/tickets_rented_by_month - –û—Ç—á—ë—Ç: –ë–∏–ª–µ—Ç—ã, –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü —É–∫–∞–∑–∞–Ω–Ω–æ–π –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏ \n\n"
                             f"/summ_by_ailines - –û—Ç—á—ë—Ç: –û–±—â–∞—è —Å—É–º–º–∞ –æ—Ç –ø—Ä–æ–¥–∞–∂ –±–∏–ª–µ—Ç–æ–≤ –∫–∞–∂–¥–æ–π –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏ \n\n"
                             f"/airlines_by_date - –û—Ç—á—ë—Ç: –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–π –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é –¥–∞—Ç—É \n\n")                       
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        
# –†–∞–±–æ—Ç–∞ —Å –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è–º–∏
@router_a.message(Command("airlines"))
async def Airlines(message: Message, state: FSMContext):
    if message.from_user.id == ADMIN_TELEGRAM_ID:
        await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤–∏–∫–æ–º–ø–∞–Ω–∏—é, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:', reply_markup=await kb.airlines_adm())  
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        
@router_a.callback_query(F.data.startswith("airlines_adm:"))
async def Airlines_inf(query: types.CallbackQuery, state: FSMContext):
    airline_id = int(query.data.split(":")[1])
    airline_info = await get_airline_info_by_id(airline_id)
    if airline_info:
        text = (
            f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏ {airline_info['name']}:</b>\n\n"
            f"<i>ID:</i> {airline_info['id']}\n"
            f"<i>–ò–º—è:</i> {airline_info['name']}\n"
            f"<i>–ê–¥—Ä–µ—Å:</i> {airline_info['address']}")
        await query.message.answer(text, reply_markup=await kb.airlines_keyboard_act(airline_id))
    else:
        await query.message.answer("–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=await kb.return_to_menu())
        
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏
@router_a.callback_query(F.data.startswith("action.airlines.add_"))
async def Airline_ad(query: types.CallbackQuery, state: FSMContext):
    await query.message.answer(f"–î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—É—é –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—é.\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
    await state.set_state(AddAirlineStates.name) 

@router_a.message(AddAirlineStates.name)
async def Process_airline_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏:")
    await state.set_state(AddAirlineStates.address) 

@router_a.message(AddAirlineStates.address)
async def Process_airline_address(message: Message, state: FSMContext):
    await state.update_data(address=message.text)
    data = await state.get_data()
    name = data.get('name', '')
    address = data.get('address', '')

    # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–æ–≤–µ—Ä–∏–º, —É—Å–ø–µ—à–Ω–æ –ª–∏ —ç—Ç–æ –ø—Ä–æ—à–ª–æ
    success = await save_airline_to_db({'name': name, 'address': address})

    if success:
        await message.answer("–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
        text = (f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è:\n\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{name}</b>\n"
                f"–ê–¥—Ä–µ—Å: <b>{address}</b>\n")
        await message.answer(text,reply_markup=await kb.menu())
        await state.clear()
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏
@router_a.callback_query(F.data.startswith("action.airlines.edit_"))
async def Airline_edit(query: types.CallbackQuery, state: FSMContext):
    airline_id_str = query.data.split("_")[1]
    airline_id = int(airline_id_str)
    await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=await kb.airline_edit_keyboard(airline_id, state))

@router_a.callback_query(F.data.startswith("action.airline.address"))
async def Airline_edit_address(query: types.CallbackQuery, state: FSMContext):
    airline_id_str = query.data.split("_")[1]
    airline_id = int(airline_id_str)
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏:")
    await state.update_data(airline_id=airline_id)
    await state.set_state(EditAirlineStates.address_edit)

@router_a.message(EditAirlineStates.address_edit)
async def Process_airline_edit_address(message: Message, state: FSMContext):
    new_address = message.text
    data = await state.get_data()
    airline_id = data.get('airline_id')
    success = await update_airline_address(airline_id, new_address)

    if success:
        await message.answer("–ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    
    await state.clear()

@router_a.callback_query(F.data.startswith("action.airline.name"))
async def Airline_edit_name(query: types.CallbackQuery, state: FSMContext):
    airline_id_str = query.data.split("_")[1]
    airline_id = int(airline_id_str)
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏:")
    await state.update_data(airline_id=airline_id)
    await state.set_state(EditAirlineStates.name_edit)

@router_a.message(EditAirlineStates.name_edit)
async def Process_airline_edit_name(message: Message, state: FSMContext):
    new_name = message.text
    data = await state.get_data()
    airline_id = data.get('airline_id')
    success = await update_airline_name(airline_id, new_name)

    if success:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    
    await state.clear()

# –£–¥–∞–ª–µ–Ω–∏–µ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –±–¥
@router_a.callback_query(F.data.startswith("action.airlines.delete_"))
async def Airline_delete(query: types.CallbackQuery):
    airline_id_str = query.data.split("_")[1]
    airline_id = int(airline_id_str)
    success = await delete_airline_from_db(airline_id)
    if success:
        await query.message.answer("–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
    else:
        await query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—é.")
    await query.message.answer("üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=await kb.menu())
        
# –û—Ç—á—ë—Ç: –ë–∏–ª–µ—Ç—ã, –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü —É–∫–∞–∑–∞–Ω–Ω–æ–π –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏ 
@router_a.message(Command("tickets_rented_by_month"))
async def tickets_rented_by_month(message: Message, state: FSMContext):
    if message.from_user.id == ADMIN_TELEGRAM_ID:
        await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤–∏–∫–æ–º–ø–∞–Ω–∏—é, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:', reply_markup=await kb.airlines_otchet())  
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@router_a.callback_query(F.data.startswith("airlines_otchet:"))
async def tickets_rented_by_month_start(query: types.CallbackQuery, state: FSMContext):
    airlines_id_str = query.data.split(":")[1]
    airlines_id = int(airlines_id_str)
    await state.update_data(airlines_id=airlines_id)
    await query.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç:', reply_markup=await kb.airlines_month())  

@router_a.callback_query(F.data.startswith("airlines.month_"))
async def tickets_rented_by_month_month(query: types.CallbackQuery, state: FSMContext):
    try:
        month_str = query.data[-2:]  
        month = int(month_str)
        data = await state.get_data()
        airline_id = data.get('airlines_id')

        # –ü–æ–ª—É—á–∞–µ–º –±–∏–ª–µ—Ç—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü –∏ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—é
        tickets = await get_tickets_info_by_month_and_airline(airline_id, month)

        if tickets:
            # –°–æ–∑–¥–∞–µ–º DataFrame –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel-—Ñ–∞–π–ª 
            df = pd.DataFrame([
                {
                    "ID –±–∏–ª–µ—Ç–∞": ticket.id,
                    "–¢–∏–ø –±–∏–ª–µ—Ç–∞": ticket.ticket_type,
                    "–î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏": ticket.sale_date,
                    "–°–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞": f"{str(ticket.client.passport_series)} {str(ticket.client.passport_number)}",
                    "–ò–º—è –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏": ticket.airline.name,
                    "–ê–¥—Ä–µ—Å –æ—Ñ–∏—Å–∞ –ø—Ä–æ–¥–∞–∂": ticket.ticket_office.address,
                    "–§–ò–û –∫–∞—Å—Å–∏—Ä–∞": ticket.cashier.full_name,
                } for ticket in tickets
            ], columns=["ID –±–∏–ª–µ—Ç–∞", "–¢–∏–ø –±–∏–ª–µ—Ç–∞", "–î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏", "–°–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞", "–ò–º—è –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏", "–ê–¥—Ä–µ—Å –æ—Ñ–∏—Å–∞ –ø—Ä–æ–¥–∞–∂", "–§–ò–û –∫–∞—Å—Å–∏—Ä–∞"])

            # –°–æ–∑–¥–∞–µ–º Excel-—Ñ–∞–π–ª
            excel_content = io.BytesIO()
            with pd.ExcelWriter(excel_content, engine="xlsxwriter") as writer:
                df.to_excel(writer, sheet_name="Sheet1", index=False)
                worksheet = writer.sheets["Sheet1"]
                # –†–∞—Å—à–∏—Ä—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –ø–æ —à–∏—Ä–∏–Ω–µ –¥–∞–Ω–Ω—ã—Ö
                for i, col in enumerate(df.columns):
                    max_len = df[col].astype(str).apply(len).max()
                    worksheet.set_column(i, i, max_len + 2)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel-—Ñ–∞–π–ª
            input_file = BufferedInputFile(excel_content.getvalue(), filename=f"report_airline_{airline_id}_month_{month}.xlsx")
            await query.message.answer_document(input_file, caption=f"–û—Ç—á–µ—Ç –ø–æ –±–∏–ª–µ—Ç–∞–º –∑–∞ –º–µ—Å—è—Ü {month} –¥–ª—è –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏ ")
            await state.clear()
        else:
            await query.message.answer(f"–î–∞–Ω–Ω—ã–µ –æ –±–∏–ª–µ—Ç–∞—Ö –∑–∞ –º–µ—Å—è—Ü {month} –¥–ª—è –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            await state.clear()
    except ValueError as e:
        print("ValueError:", e)
        await query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        await state.clear()

        
# –û—Ç—á—ë—Ç: –û–±—â–∞—è —Å—É–º–º–∞ –æ—Ç –ø—Ä–æ–¥–∞–∂ –±–∏–ª–µ—Ç–æ–≤ –∫–∞–∂–¥–æ–π –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏
@router_a.message(Command("summ_by_ailines"))
async def summ_by_ailines(message: Message, state: FSMContext):
    if message.from_user.id == ADMIN_TELEGRAM_ID:
        await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤–∏–∫–æ–º–ø–∞–Ω–∏—é, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:', reply_markup=await kb.summ_by_airlines())
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@router_a.callback_query(F.data.startswith("summ_by_airlines:"))
async def summ_by_ailines_start(query: types.CallbackQuery, state: FSMContext):
    airline_id = int(query.data.split(":")[1])
    tickets = await get_tickets_info_by_airline(airline_id)
    total_sales_by_airline = calculate_total_sales_by_airline(tickets)
    await query.message.answer(f"–û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏: {total_sales_by_airline}.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ–±—â–µ–π —Å—É–º–º—ã –ø—Ä–æ–¥–∞–∂ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏
def calculate_total_sales_by_airline(tickets):
    total_sales = 0
    for ticket in tickets:
        for coupon in ticket.coupons:
            total_sales += coupon.fare
    return total_sales

# –û—Ç—á—ë—Ç: –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–π –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é –¥–∞—Ç—É
@router_a.message(Command("airlines_by_date"))
async def Airlines(message: Message, state: FSMContext):
    if message.from_user.id == ADMIN_TELEGRAM_ID:
        await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤–∏–∫–æ–º–ø–∞–Ω–∏—é, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞', reply_markup=await kb.airlines_data())
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@router_a.callback_query(F.data.startswith("airlines_data:"))
async def airlines_data_start(query: types.CallbackQuery, state: FSMContext):
    airlines_id_str = query.data.split(":")[1]
    airlines_id = int(airlines_id_str)
    await state.update_data(airlines_id=airlines_id)
    await query.message.answer(f'–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–î–î.–ú–ú.–ì–ì–ì–ì":')
    await state.set_state(DataAirlineStates.time_start)

@router_a.message(DataAirlineStates.time_start)
async def airlines_data_start_data(message: Message, state: FSMContext):
    time_start = message.text
    if time_start:
        try:
            await state.update_data(time_start=time_start)
            await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–î–î.–ú–ú.–ì–ì–ì–ì":')
            await state.set_state(DataAirlineStates.time_finish)
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–î–î.–ú–ú.–ì–ì–ì–ì'.")

@router_a.message(DataAirlineStates.time_finish)
async def airlines_data_finish_data(message: Message, state: FSMContext):
    time_finish = message.text
    if time_finish:
        try:
            await state.update_data(time_finish=time_finish)

            data = await state.get_data()
            airlines_id = data.get('airlines_id')
            time_finish = data.get('time_finish')
            time_start = data.get('time_start')
            print(time_start, time_finish)
            # –ü–æ–ª—É—á–∞–µ–º –±–∏–ª–µ—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
            tickets = await get_tickets_info_by_date_and_airline(airlines_id, time_start, time_finish)

            if tickets:
                # –°–æ–∑–¥–∞–µ–º Excel-—Ñ–∞–π–ª
                excel_content = await create_excel_file(tickets, "–ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏", time_start, time_finish)
                input_file = BufferedInputFile(excel_content, filename=f"report_airline_{airlines_id}_dates_{time_start}_to_{time_finish}.xlsx")
                await message.answer_document(input_file, caption=f"–û—Ç—á–µ—Ç –ø–æ –±–∏–ª–µ—Ç–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {time_start} –ø–æ {time_finish} –¥–ª—è –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏ {airlines_id}")
                await state.clear()
            else:
                await message.answer(f"–î–∞–Ω–Ω—ã–µ –æ –±–∏–ª–µ—Ç–∞—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {time_start} –ø–æ {time_finish} –¥–ª—è –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏ {airlines_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                await state.clear()
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ì–ì–ì–ì-–ú–ú-–î–î'.")
            
async def create_excel_file(tickets, airline_name, start_date, finish_date):
    # –°–æ–∑–¥–∞–µ–º DataFrame
    df = pd.DataFrame([
        {
            "ID –±–∏–ª–µ—Ç–∞": ticket.id,
            "–¢–∏–ø –±–∏–ª–µ—Ç–∞": ticket.ticket_type,
            "–î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏": ticket.sale_date,
            "–ö–∞—Å—Å–∞": ticket.ticket_office.address,
            "–ö–∞—Å—Å–∏—Ä": ticket.cashier.full_name,
            "–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è": ticket.airline.name,
            "–ö–ª–∏–µ–Ω—Ç": ticket.client.full_name,
            "–°–µ—Ä–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞": ticket.client.passport_series,
            "–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞": ticket.client.passport_number,
            "ID –∫—É–ø–æ–Ω–∞": ticket.coupons[0].id if ticket.coupons else None,
            "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ—Ç–∞": ticket.coupons[0].flight_direction if ticket.coupons else None,
            "–¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞": ticket.coupons[0].fare if ticket.coupons else None,
        } for ticket in tickets
    ])

    # –°–æ–∑–¥–∞–µ–º Excel-—Ñ–∞–π–ª
    excel_content = io.BytesIO()
    with pd.ExcelWriter(excel_content, engine="xlsxwriter") as writer:
        df.to_excel(writer, sheet_name="Sheet1", index=False)
        worksheet = writer.sheets["Sheet1"]
        # –†–∞—Å—à–∏—Ä—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –ø–æ —à–∏—Ä–∏–Ω–µ –¥–∞–Ω–Ω—ã—Ö
        for i, col in enumerate(df.columns):
            max_len = df[col].astype(str).apply(len).max()
            worksheet.set_column(i, i, max_len + 2)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel-—Ñ–∞–π–ª
    return excel_content.getvalue()